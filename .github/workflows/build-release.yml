name: Build and Release

on:
  release:
    types: [created]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: linux
          - os: macos-latest
            artifact_name: macos
          - os: windows-latest
            artifact_name: windows
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pandas numpy openpyxl PyQt5

      - name: Build with PyInstaller
        run: pyinstaller build.spec --clean

      - name: Compress Artifacts
        shell: bash
        run: |
          mkdir -p release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              # 压缩 Windows 产物为 ZIP 文件
              7z a -tzip release/ScheduleApp-${{ matrix.artifact_name }}.zip dist/*.exe
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              # 压缩 macOS 产物为 ZIP 文件
              cd dist && zip -r ../release/ScheduleApp-${{ matrix.artifact_name }}.zip ScheduleApp.app
          else
              # 压缩 Linux 产物为 TAR.GZ 文件
              tar czvf release/ScheduleApp-${{ matrix.artifact_name }}.tar.gz -C dist .
          fi
      

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ScheduleApp-${{ matrix.artifact_name }}
          path: release/*

  upload-release:
    needs: build  # 依赖于 build job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up GitHub CLI
        run: |
            sudo apt install gh -y  # 安装 GitHub CLI
        
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: ScheduleApp-*
          path: ./release  # 下载构建产物
        
      - name: Check the files in ./release directory
        run: |
            echo "Listing files in ./release directory"
            ls -l ./release  # 确保目录里有正确的文件
        
      - name: Upload to Release
        run: |
            echo "Uploading files to GitHub release"
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              gh release upload ${{ github.ref_name }} \
                ./release/ScheduleApp-windows.zip \
                --clobber
            elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              gh release upload ${{ github.ref_name }} \
                ./release/ScheduleApp-macos.zip \
                --clobber
            # else
            #   gh release upload ${{ github.ref_name }} \
            #     ./release/ScheduleApp-linux.tar.gz \
            #     --clobber
            fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 用于认证 GitHub API
              
